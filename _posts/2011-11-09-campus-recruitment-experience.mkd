--- 
type: post
status: publish
tags: 
- thinking
title: 校招面经
category: thinking

layout: post
meta: 
  _edit_last: "1"
published: true
---
首先了，这次虽然是拿到了几个offer，但找工作的时候还是挺郁闷的。我找的是开发类的工作，偏向后端的那种，有一家向往已久了公司，不过最后还是选择去了另一家。总之了，这里写写面经赞赞人品。

面经在网上一搜一大把，很多的是讲面试的流水账。开始了，在面试技巧方面我先阐述一下，这个算是个人的心得吧。如果你没有面试过，我劝你还是先找几家不是很想去的公司练练，实践才能出真理嘛。在面试的时候一定要表现的自信，能够让面试官从你身上看出你的不同点或者是亮点。回答问题的时候，需要表现出自己是一个有思想、有想法的人。要灵活的抓住面试的主动权，能够把话题引向自己擅长的领域。自己提问也是一个非常重要的环节，通过这个环节尽量给自己贴一些金，淡化笔试或者面试中不好的地方。当然这些也不是绝对的。<!--split-->

面试过程中难免会有现场写代码。写简单的也不要洋洋得意，简单的代码更多的注重高效、健壮。难的也不要灰心，至少要表达出自己的主要意思。写代码不要太慢也不要太快，太慢会让面试官觉得你很水，太快容易让自己犯低级错误。

个人感觉，作为一个本科应届生。面试官对于你不会有很高的期望，更多的是对于你基础知识、学习能力、实践能力的看重。所以，在学校里面，也不用担心自己没有什么很NB的项目经验，当然有更好，关键是你能不能一直的在实践，并能够通过实践着实的提高了自己的水平和对于知识的理解程度。我觉得这个需要发挥自己的想象，把自己所学的知识综合起来，然后做个项目，这是最好的。

所以了笔试面试神马的都是功在平时，那些投机取巧，只能是说给你锦上添花。当然，又有童鞋说这么多的东西学不完呀。要学的东西确实很多，所以必须抓住一切可以利用的时间，像暑假寒假神马的，为了好工作暂时还是不要了吧。还有一个比较重要的是，知识有广度和深度之分的，广度和深度是需要相辅相成的，不要偏激了，这样对于自学来说是很有帮助的。最终把自己擅长的那个方向狠狠的深下去。

下面简单的说说功在平时吧。嗯…说到基础知识要扎实的话，我的理解主要有这四方面，数据结构和算法、操作系统、网络、编译原理。

作为数据结构的学习资料来说，严蔚敏的那本《数据结构》还是不错的。重要的知识有链表、队列、Hash、各种B树等。其实书上讲的都很简单，重要的是自己的扩展和深入的思考。就比如一个队列，如何实现高性能，如何能够在多线程环境操作等。

其中有关内存管理方面的东西，包括两个算法，一个是边界标志法，一个是有伴系统。这个两个东西是你以后写c/c++程序管理内存的先驱知识。c/c++的内存管理是一门很复杂的学问，这个可以在网络上找相关知识，不过也有一本书《Memory Management - Algorithms And Implementation In C-C++ (2002)》，也不错。对于笔试面试的一些问题也是很有帮助的。然后扩展一下，再就是linux内核里面关于磁盘缓存算法。重点是如何做的那个hash链，LRU算法是如何实现的。Hash是用来提高查找缓存块的速度的。LRU是用来更有效淘汰缓存块的，但很重要的实现特性是它的性能。

对于AVL、B-、B+树，这也是很重要的内容，这个关系到了我们磁盘存储方面的很多知识。包括现在的分布式存储系统有很多也是用这个作为基础的。想要深入理解这几个东西的话，就看《MySQL技术内幕InnoDB存储引擎.》这本书的相关章节，很有帮助的。

再就是hash了，这个也是非常重要的。一个如何设计hash函数，再就是如何利用hash思想。Hash函数的设计可以参考我的这篇文章《<a title="学些Hash" href="/2011/11/09/learn-write-hash/">学写Hash</a>》。利用hash思想解决问题是很重要的。Hash的本质在于查找，解决算法问题的时候，你也要找到这个问题的本质是查找或者转化为查找问题。例如，两个数组A、B，求两个数组是否有交集。本质上，不管你用什么方法基本都是查找的过程。这个问题可以扩充到很大很多的文件来存储这两批数，本质依然是一样。理论上用hash的时间复杂度上界都是最低的。

操作系统方面也需要一定的理解，主要在于这几个方面，内存管理、进程管理、磁盘管理、多线程、同步互斥等。推荐的书有《现代操作系统》。除此之外，还需要实际的理解这些东西在一个具体操作系统上的实现。推荐是《linux0.12 内核完全剖析》。如果想要更深入的理解一些磁盘文件系统的话，可以去看FAT12格式的实现，那个比较简单。或者再看看EXT2的实现。那本《Linux_C编程一站式学习》电子版中的第三部分讲解的初级Linux系统编程还是很有用的。当然想要学好Linux下面的编程的话，Steven的六本书是必备的。如果不想看完，但至少看，《TCP/IP协议详解 卷一》、《UNIX网络编程》、《UNIX高级环境编程》这几本。

关于网络方面的，除了TCP/IP之外，还是需要懂得下面的编程。当然简单socket编程，那个没意思。《UNIX网络编程》上面也讲了蛮多。想要更高级点点可以看看《The C10K Problem》，这个是有中文译文的。如果你是想要找互联公司的话，最好是HTTP协议有所了解。包括能够理解一个url在浏览器到服务器到显示网页的详细的过程。

算法方面的话，肯定是会少不了的。推荐的书有《算法导论》，其中对于算法复杂度的计算要学好。然后就是多看一些算法专题，比如关于字符串的，扩展就有字符串的各种匹配算法、相似度、查找等。额。。。总之多看几遍《算法导论》就OK啦。然后了，现在分布式系统那么流行，动不动就是海量数据处理。这个需要一定的了解。还一些面试书是很棒的，比如《编程之美----微软技术面试心得》，搞不好还有原题。^_^

然后还需要一门比较精通的语言，我自己比较擅长的是c和PHP。其实精通这个词有点扯淡，精不精通都是相对的，谁敢说自己精通了。就拿c语言来说，不是你会不会for，会不会while。而是你能用c写一个怎么表述能力强的结构体；会不会管理内存；能用c实现多么巧妙的处理过程，比如回调，看看Linux的文件系统操作接口实现就明白了；能不能理解c语言的底层机制，如函数调用原理，大端小端等；能不能理解用c实现面向对象的内涵等等。当然还有很多语言本身或者是语法方面的东西，这个推荐看《高质量C++/C 编程指南》和《C语言深度解剖》。

&nbsp;
