--- 
type: post
status: publish
tags: 
- rsync
- 数据备份

title: 网站数据备份
category: works

layout: post
meta: 
  _edit_last: "1"
published: true
---
好久前都在说给网站数据做一下备份，要是万一那天数据丢掉了想找回来就难了，因此了做个数据备份还是比较合算的。

目前了<a title="南湖青年网" href="http://www.nhqn.com" target="_blank">我们网站</a>的数据量还是不大的，大的是视频文件，这部分我不打算备份了，毕竟资源是太有限了。现在来说主要要备份的数据就是主服务器上的网站源码、应用源码和运行过程中生成的数据。这部分数据不是很大，现在还在10G左右。备份的方法想的蛮多的，开始想自己写个shell来备份，但是转眼一想，不可靠。然后看到了一个强大的同步增量备份软件rsync。貌似windows下面也有。

我们主服务器总共是三个硬盘，其中一个硬盘还没有使用。由于资源有限，就打算直接将文件全部都备份在这个硬盘中，以后有了更多的服务器的时候再备份到其他服务器吧，要是其他盘崩溃了，这个盘还可以拿出来还原。

首先是关于这个软件rsync的使用，这里有比较详细的讲解<a href="http://www.xfocus.net/articles/200107/214.html" target="_blank">http://www.xfocus.net/articles/200107/214.html</a> 或者 <a href="http://www.linuxsir.org/main/?q=node/256" target="_blank">http://www.linuxsir.org/main/?q=node/256</a>

<a href="http://www.linuxsir.org/main/?q=node/256"><!--more--></a>

<strong>然后就是些自己的配置文件了</strong>
<ol>
	<li># /etc/rsync/rsyncd.conf</li>
	<li>uid = nobody #这些用户和用户组必须是存在的，有的系统gid默认可能是nogroup</li>
	<li>gid = nobody</li>
	<li>use chroot = no         # 不使用</li>
	<li>chrootmax connections = 4         # 最大连接数为4</li>
	<li>pid file = /var/run/rsyncd.pid</li>
	<li>lock file = /var/run/rsync.lock</li>
	<li>log file = /var/log/rsyncd.log    # 日志记录文件</li>
	<li>[html]            # 这里是认证的模块名，在client端需要指定</li>
	<li>path = /var/www/html/    # 需要做镜像的目录</li>
	<li>comment = BACKUP CLIENT IS SOLARIS 8 E250</li>
	<li>ignore errors            # 可以忽略一些无关的IO错误</li>
	<li>read only = yes            # 只读</li>
	<li>list = no            # 不允许列文件</li>
	<li>auth users =backup        # 认证的用户名，如果没有这行，则表明是匿名，其实没有必要和有些人说的那样必须是系统                                                         #存在的用户，这个用户只是针对rsync这个软件来说的，关键是密码文件的访问权限。如果                                                      #你 想用多个用户，那就以,号隔开；比如 auth users = root, linux</li>
	<li>secrets file = /etc/rsync.secret    # 认证文件名</li>
</ol>
我配置的后老是出现两个错误

<em>一个是@ERROR: chroot failed</em>

这个可能是目录不存在，或者就是配置配置文件里面有错，不能有多余空格，建议删除所有注释和空白行

<em>一个是@ERROR: auth failed on module xxxxx</em>

这个就是相应模块密码是否正确了，或者密码文件的权限不对，请确保服务端密码文件的权限为：-rw------- 1 root root ......，格式为username:password。如果按照上面来还是会出错那可能就是多余空格的问题。

如果有更多的问题的话，查看日志文件/var/log/rsync.log可能会得到帮助，总体上感觉出问题的很多地方时权限的问题，linux下面的权限管理还是比较复杂的。

ps:唉，这个配置文件里面不能有多余的空格，这个好憋屈呀，上面浪费了很多时间

<strong>接着就是运行rsync 服务了</strong>

rsync运行后不用关闭重启就可以直接修改配置文件生效，测试rsync基本的备份工作完全正常，能够增量备份，自动删除服务器上不存在文件。

其实rsync是这样工作的，开启服务器运行时，会检查是否存在配置文件，存在就正常运行。然后在每次客户端连接的时候就会根据相应的配置做相应的处理和验证。因此修改配置不用重启服务器

如果要你用rsync 命令不能启动，可能是防火墙没有设定好，可能是因为权限不够，873是特权端口，需要根用户才能使用。用sudo rsync --daemon就可以启动了。

<strong>在就是用rsync连接到服务端同步了</strong>

这里我用了比较简单的命令来连接测试了下下：

<em>rsync -avz --delete --exclude-from=/tmp/dir backup@127.0.0.1::html /tmp/test</em>

<em>这里想要说明的一点是关于排除不想要同步的目录。首先我们是备份一个目录，里面还有很多的子目录，然后排除的就是某些子目录这些子目录用--exclude-form=<em>/tmp/dir这个选项来实现。这个等号后面的是一个文件的路径，里面每一行记录一个子目录的相对路径。下面是对于个选项的详细中文说明：</em></em>
<div>选项说明</div>
<div style="padding-left: 30px;">-v, --verbose 详细模式输出</div>
<div style="padding-left: 30px;">-q, --quiet 精简输出模式</div>
<div style="padding-left: 30px;">-c, --checksum 打开校验开关，强制对文件传输进行校验</div>
<div style="padding-left: 30px;">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD</div>
<div style="padding-left: 30px;">-r, --recursive 对子目录以递归模式处理</div>
<div style="padding-left: 30px;">-R, --relative 使用相对路径信息</div>
<div style="padding-left: 30px;">rsync foo/bar/foo.c remote:/tmp/</div>
<div style="padding-left: 30px;">则在/tmp目录下创建foo.c文件，而如果使用-R参数：</div>
<div style="padding-left: 30px;">rsync -R foo/bar/foo.c remote:/tmp/</div>
<div style="padding-left: 30px;">则会创建文件/tmp/foo/bar/foo.c，也就是会保持完全路径信息。</div>
<div style="padding-left: 30px;">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</div>
<div style="padding-left: 30px;">--backup-dir 将备份文件(如~filename)存放在在目录下。</div>
<div style="padding-left: 30px;">-suffix=SUFFIX 定义备份文件前缀</div>
<div style="padding-left: 30px;">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件。(不覆盖更新的文件)</div>
<div style="padding-left: 30px;">-l, --links 保留软链结</div>
<div style="padding-left: 30px;">-L, --copy-links 想对待常规文件一样处理软链结</div>
<div style="padding-left: 30px;">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结</div>
<div style="padding-left: 30px;">--safe-links 忽略指向SRC路径目录树以外的链结</div>
<div style="padding-left: 30px;">-H, --hard-links 保留硬链结</div>
<div style="padding-left: 30px;">-p, --perms 保持文件权限</div>
<div style="padding-left: 30px;">-o, --owner 保持文件属主信息</div>
<div style="padding-left: 30px;">-g, --group 保持文件属组信息</div>
<div style="padding-left: 30px;">-D, --devices 保持设备文件信息</div>
<div style="padding-left: 30px;">-t, --times 保持文件时间信息</div>
<div style="padding-left: 30px;">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间</div>
<div style="padding-left: 30px;">-n, --dry-run现实哪些文件将被传输</div>
<div style="padding-left: 30px;">-W, --whole-file 拷贝文件，不进行增量检测</div>
<div style="padding-left: 30px;">-x, --one-file-system 不要跨越文件系统边界</div>
<div style="padding-left: 30px;">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节</div>
<div style="padding-left: 30px;">-e, --rsh=COMMAND 指定替代rsh的shell程序</div>
<div style="padding-left: 30px;">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息</div>
<div style="padding-left: 30px;">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件</div>
<div style="padding-left: 30px;">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件</div>
<div style="padding-left: 30px;">--delete 删除那些DST中SRC没有的文件</div>
<div style="padding-left: 30px;">--delete-excluded 同样删除接收端那些被该选项指定排除的文件</div>
<div style="padding-left: 30px;">--delete-after 传输结束以后再删除</div>
<div style="padding-left: 30px;">--ignore-errors 及时出现IO错误也进行删除</div>
<div style="padding-left: 30px;">--max-delete=NUM 最多删除NUM个文件</div>
<div style="padding-left: 30px;">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输</div>
<div style="padding-left: 30px;">--force 强制删除目录，即使不为空</div>
<div style="padding-left: 30px;">--numeric-ids 不将数字的用户和组ID匹配为用户名和组名</div>
<div style="padding-left: 30px;">--timeout=TIME IP超时时间，单位为秒</div>
<div style="padding-left: 30px;">-I, --ignore-times 不跳过那些有同样的时间和长度的文件</div>
<div style="padding-left: 30px;">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间</div>
<div style="padding-left: 30px;">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0</div>
<div style="padding-left: 30px;">-T --temp-dir=DIR 在DIR中创建临时文件</div>
<div style="padding-left: 30px;">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份</div>
<div style="padding-left: 30px;">-P 等同于 --partial</div>
<div style="padding-left: 30px;">--progress 显示备份过程</div>
<div style="padding-left: 30px;">-z, --compress 对备份的文件在传输时进行压缩处理</div>
<div style="padding-left: 30px;">--exclude=PATTERN 指定排除不需要传输的文件模式</div>
<div style="padding-left: 30px;">--include=PATTERN 指定不排除而需要传输的文件模式</div>
<div style="padding-left: 30px;">--exclude-from=FILE 排除FILE中指定模式的文件</div>
<div style="padding-left: 30px;">--include-from=FILE 不排除FILE指定模式匹配的文件</div>
<div style="padding-left: 30px;">--version 打印版本信息</div>
<div style="padding-left: 30px;">--address 绑定到特定的地址</div>
<div style="padding-left: 30px;">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件</div>
<div style="padding-left: 30px;">--port=PORT 指定其他的rsync服务端口</div>
<div style="padding-left: 30px;">--blocking-io 对远程shell使用阻塞IO</div>
<div style="padding-left: 30px;">-stats 给出某些文件的传输状态</div>
<div style="padding-left: 30px;">--progress 在传输时现实传输过程</div>
<div style="padding-left: 30px;">--log-format=formAT 指定日志文件格式</div>
<div style="padding-left: 30px;">--password-file=FILE 从FILE中得到密码</div>
<div style="padding-left: 30px;">--bwlimit=KBPS 限制I/O带宽，KBytes per second</div>
<div style="padding-left: 30px;">-h, --help 显示帮助信息</div>
<p style="padding-left: 30px;"><strong>最后就是自动备份了</strong></p>
首先是rysnc开机自动启动。

启动server端 ：

<span style="color: #00ffff;">方法1：</span>独立启动
/usr/bin/rsync --daemon
开机启动：echo "/usr/bin/rsync --daemon" &gt;&gt; /etc/rc.local

<span style="color: #00ffff;">方法2：</span>xinetd超级进程启动
<span style="color: #274e13;">1）、
修改/etc/xinetd.d/rsync文件，把其中的disable=yes改为disable=no
#sed -i -e "/disable/{ s/yes/no/ }" /etc/xinetd.d/rsync</span>

或

<span style="color: #999999;">#vi /etc/xinetd.d/rsync
修改disable = yes  为 disable = no
service rsync
{
disable = no
socket_type     = stream
wait            = no
user            = root
server          = /usr/bin/rsync
server_args     = --daemon
log_on_failure  += USERID
}</span>

然后就是定时执行同步脚本了，上面的两片文章里也有。注意如果是同步内容每次就要指定一个目录。

然后就是写需要排除的子目录了。排除的目录主要是缓存目录和缓存内容，就是我们网站里面静态化缓存的页面目录，比如"a"目录。

ok！网站能够同步备份了。
